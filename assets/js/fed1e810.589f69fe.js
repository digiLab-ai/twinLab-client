"use strict";(self.webpackChunktwin_lab_client=self.webpackChunktwin_lab_client||[]).push([[883],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},l="List datasets",o={unversionedId:"api_reference/list_datasets",id:"api_reference/list_datasets",title:"List datasets",description:"List datasets that have been uploaded to the twinLab cloud.",source:"@site/docs/api_reference/list_datasets.md",sourceDirName:"api_reference",slug:"/api_reference/list_datasets",permalink:"/twinLab-client/docs/api_reference/list_datasets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/list_datasets.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Query dataset",permalink:"/twinLab-client/docs/api_reference/query_dataset"},next:{title:"Train campaign",permalink:"/twinLab-client/docs/api_reference/train_campaign"}},s={},p=[{value:"Arguments",id:"arguments",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"list-datasets"},"List datasets"),(0,a.kt)("p",null,"List datasets that have been uploaded to the ",(0,a.kt)("inlineCode",{parentName:"p"},"twinLab")," cloud."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE:")," Your user information is automatically added to the request using the ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"server"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"str"),"; {",(0,a.kt)("inlineCode",{parentName:"li"},'"local"'),", ",(0,a.kt)("inlineCode",{parentName:"li"},'"dev"'),", ",(0,a.kt)("inlineCode",{parentName:"li"},'"stage"'),", ",(0,a.kt)("inlineCode",{parentName:"li"},'"cloud"'),"}"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"verbose"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"bool")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"debug"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"bool"))),(0,a.kt)("h2",{id:"returns"},"Returns"),(0,a.kt)("p",null,"A list of ",(0,a.kt)("inlineCode",{parentName:"p"},"str")," dataset names, or ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," if there are no datasets"),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import twinlab as tl\n\ndatasets = tl.list_datasets()\nprint(datasets)\n")))}d.isMDXComponent=!0}}]);